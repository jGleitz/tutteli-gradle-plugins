rootProject.name = 'tutteli-gradle'


buildscript {
    gradle.ext.version = '0.1.1-SNAPSHOT'
    gradle.ext.repo = "${rootProject.projectDir}/repo"

    apply from: "${rootProject.projectDir}/gradle/scripts/localRepo.gradle"
    includeLocalRepo(gradle.ext.repo, 'settings', gradle.ext.version, this)
}

if (!ext.localPluginExists) {
    buildscript {
        repositories {
            maven {
                url "https://plugins.gradle.org/m2/"
            }
        }
        dependencies {
            classpath "ch.tutteli:tutteli-gradle-settings:0.1.0"
        }
    }
}

//TODO remove as soon as 0.1.0 is published
def includeTopLevel(String name) { includeInSubFolder(name, "/") }
def includeInSubFolder(String nameWithoutPrefix, String folder) {
    def name = "${rootProject.name}-$nameWithoutPrefix"
    include ":$name"
    project(":$name").projectDir = new File("${rootProject.projectDir}/$folder/$name")
}

def error = false

//TODO remove `if` as soon as 0.1.0 is published
if (ext.localPluginExists && !error) {
    apply plugin: 'ch.tutteli.settings'
}

//TODO enable as soon as 0.1.0 is publsihed
if (ext.localPluginExists && !error) {
    /**
     * Shortcut for `include "${rootProject.name}-settings"; include "${rootProject.name}-jacoco"`
     */
    includeOwn ('settings', 'jacoco')
} else {
    includeTopLevel 'settings'
    includeTopLevel 'jacoco'
}

/**
 * Shortcut for `include "${rootProject.projectDir}/folder/${rootProject.name}-name"`
 * and it sets `project.projectDir` accordingly
 */
//includeInFolder('folder', 'name')

/**
 * Does not use naming convention.
 * Shortcut for `include "${rootProject.projectDir}/folder/name"`
 * and it sets `project.projectDir` accordingly
 */
//includeCustomInFolder('folder', 'name')

/**
 * Or you can use the extension object `include`
 *
 * include {
 *     //same as includeOwn
 *     modules 'one module'
 *     modules ('or', 'several', 'modules')
 *
 *     folder ('test') {
 *          //same as includeInFolder
 *          modules 'in-folder'
 *
 *          //same as includeCustomInFolder
 *          custom 'without-prefix'
 *          custom ('also', 'multiple', 'without', 'prefix', 'is', 'possible')
 *     }
 *
 *     //same as a normal `include` -- or in other words, not prefixed with `rootProject.name`
 *     custom 'toplevel'
 * }
 *
 */
