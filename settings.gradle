rootProject.name = 'tutteli-gradle'

buildscript {
    def version = '0.1.1-SNAPSHOT'
    gradle.ext.version = version

    def repo = "${rootProject.projectDir}/repo"
    gradle.ext.repo = repo
    def repoDir = file(repo)
    ext.localPluginExists = false
    if (repoDir.exists()) {
        ext.localPluginExists = file("${repoDir.absolutePath}/ch/tutteli/${rootProject.name}-settings/$version").exists()
        if (ext.localPluginExists) {

            repositories {
                //for local development
                maven { url { uri(repo) } }
            }

            dependencies {
                classpath "ch.tutteli:tutteli-gradle-settings:$version"
            }
        } else {
            logger.log(LogLevel.ERROR, "local repo exists but not corresponding version, execute gr cleanRepo repo")
        }
    }
}

if (!ext.localPluginExists) {
    buildscript {
        repositories {
            maven {
                url "https://plugins.gradle.org/m2/"
            }
        }
        dependencies {
            classpath "ch.tutteli:tutteli-gradle-settings:0.1.0"
        }
    }
}

//TODO remove as soon as 0.1.0 is published
def includeTopLevel(String name) { includeInSubFolder(name, "/") }
def includeInSubFolder(String nameWithoutPrefix, String folder) {
    def name = "${rootProject.name}-$nameWithoutPrefix"
    include ":$name"
    project(":$name").projectDir = new File("${rootProject.projectDir}/$folder/$name")
}
includeTopLevel 'settings'

def error = true

//TODO remove `if` as soon as 0.1.0 is published
if (ext.localPluginExists && !error) {
    apply plugin: 'ch.tutteli.settings'
}

//TODO enable as soon as 0.1.0 is publsihed
if (!error) {
    /**
     * Shortcut for include "${rootProject.name}-settings"
     */
    includeOwn 'settings'
}

/**
 * Shortcut for `include "${rootProject.projectDir}/folder/${rootProject.name}-name"`
 * and it sets `project.projectDir` accordingly
 */
//includeInFolder('folder', 'name')

/**
 * Does not use naming convention.
 * Shortcut for `include "${rootProject.projectDir}/folder/name"`
 * and it sets `project.projectDir` accordingly
 */
//includeCustomInFolder('folder', 'name')

/**
 * Or you can use the extension object `include`
 *
 * include {
 *     //same as includeOwn
 *     modules 'one module'
 *     modules ('or', 'several', 'modules')
 *
 *     folder ('test') {
 *          //same as includeInFolder
 *          modules 'in-folder'
 *
 *          //same as includeCustomInFolder
 *          custom 'without-prefix'
 *          custom ('also', 'multiple', 'without', 'prefix', 'is', 'possible')
 *     }
 *
 *     //same as a normal `include` -- or in other words, not prefixed with `rootProject.name`
 *     custom 'toplevel'
 * }
 *
 */
