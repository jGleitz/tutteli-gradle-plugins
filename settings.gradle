//local dev
buildscript {
    def repo = "${rootProject.projectDir}/repo"
    gradle.ext.repo = repo
    if (file(repo).exists()) {
        repositories {
            //for local development
            maven { url { uri(repo) } }
        }
        dependencies {
            classpath 'ch.tutteli:tutteli-gradle-settings:0.1.0'
        }
    }
}

rootProject.name = 'tutteli-gradle'

/* TODO enable in 0.1.1-SNAPSHOT
buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "ch.tutteli:tutteli-gradle-settings:0.1.0"
    }
}

apply plugin: 'ch.tutteli.settings'
*/

// TODO remove in 0.1.1-SNAPSHOT
if (file(gradle.ext.repo).exists()) {
    apply plugin: 'ch.tutteli.settings'
}
def includeTopLevel(String name) { includeInSubFolder(name, "/") }

def includeInSubFolder(String nameWithoutPrefix, String folder) {
    def name = "${rootProject.name}-$nameWithoutPrefix"
    include ":$name"
    project(":$name").projectDir = new File("${rootProject.projectDir}/$folder/$name")
}

includeTopLevel 'settings'

/**
 * shortcut for include "${rootProject.name}-settings"
 */
//TODO enable in 0.1.1-SNAPSHOT
//includeOwn 'settings'

/**
 * shortcut for `include "${rootProject.projectDir}/folder/${rootProject.name}-name"`
 * and it sets `project.projectDir` accordingly
 */
//includeInFolder 'folder' 'name'

/**
 * Does not use naming convention.
 * Shortcut for `include "${rootProject.projectDir}/folder/name"`
 * and it sets `project.projectDir` accordingly
 */
//includeCustomInFolder 'folder' 'name'
// end::example[]
