buildscript {
    ext {
        junit_version = '5.0.3'
        junit_platform_version = '1.0.3'
        publish_version = '0.9.10'
    }

    repositories {
        mavenCentral()
        maven { url "https://plugins.gradle.org/m2/" }
    }

    dependencies {
        classpath "com.gradle.publish:plugin-publish-plugin:$publish_version"
        classpath "org.junit.platform:junit-platform-gradle-plugin:$junit_platform_version"
    }
}


buildscript {
    ext.error = false
    if (!ext.error) {
        apply from: "${rootProject.projectDir}/gradle/scripts/localRepo.gradle"
        includeLocalRepo(gradle.ext.repo, 'junitjacoco', gradle.ext.version, this)
    }
    //TODO enable as soon as 0.2.0 is published
//    if (!ext.localPluginExists) {
//        dependencies {
//            classpath "ch.tutteli:tutteli-gradle-jacoco:0.2.0"
//        }
//    }
}

version = gradle.ext.version
group = 'ch.tutteli'

subprojects { subproject ->
    apply plugin: 'groovy'
    apply plugin: 'java-gradle-plugin'
    apply plugin: "com.gradle.plugin-publish"
    if (error || !rootProject.ext.localPluginExists) {
        apply plugin: 'org.junit.platform.gradle.plugin'
    } else {

        apply plugin: 'ch.tutteli.junitjacoco'

        junitjacoco {
            //enable or disable junit xml (disabled by default, enable it as follows)
            enableJunitReport = true

            //allows to configure the JacocoReportTask
            jacocoReport {
                reports {
                    html.enabled = true
                }
            }

            //delegates to the jacoco extension (just for your convenience, everything in one place)
            jacoco {
                toolVersion = '0.8.0'
            }

            //delegates to the junitPlatform extension (just for your convenience, everything in one place)
            junitPlatform {
                reportsDir = file("${buildDir}/reports/junit")
            }
        }
    }

    version = rootProject.version
    group = rootProject.group

    repositories {
        jcenter()
    }

    //TODO can be removed if plugin DSL is also applicable to settings.gradle
    task createClasspathManifest {
        def outputDir = file("${buildDir}/${name}")

        inputs.files sourceSets.main.runtimeClasspath
        outputs.dir outputDir

        doLast {
            outputDir.mkdirs()
            file("${outputDir}/plugin-classpath.txt").text = sourceSets.main.runtimeClasspath.join("\n")
        }
    }
    test.dependsOn(createClasspathManifest)

    dependencies {
        testCompile("org.junit.jupiter:junit-jupiter-api:$junit_version")
        testRuntime("org.junit.jupiter:junit-jupiter-engine:$junit_version")
        testRuntime files(createClasspathManifest)
        testCompile("org.mockito:mockito-core:2.15.0")
    }

    afterEvaluate {
        gradlePlugin {
            plugins {
                tutteliPlugin { //name does not matter
                    id = subproject.ext.plugin_id
                    implementationClass = subproject.ext.plugin_class
                }
            }
        }

        pluginBundle {
            website = 'https://github.com/robstoll/tutteli-gradle-plugin'
            vcsUrl = 'https://github.com/robstoll/tutteli-gradle-plugin.git'

            plugins {
                tutteliPlugin { //name does not matter
                    id = subproject.ext.plugin_id
                    displayName = subproject.ext.plugin_name
                    description = subproject.ext.plugin_description
                    tags = subproject.ext.plugin_tags
                }
            }

            mavenCoordinates {
                groupId = subproject.group
            }
        }
    }

    task repo(type: Copy) {
        def outputJar = "${gradle.ext.repo}/ch/tutteli/${project.name}/${project.version}/"
        outputs.dir outputJar
        from jar
        into outputJar
    }
}

task cleanRepo(type: Delete) {
    delete gradle.ext.repo
}

/*
Release & deploy
----------------
1. Update master:
    a) point to the tag
        1) search for the old version and replace with new (e.g. search=1.0.0, replace=1.1.0)
        2) search for `branch=master` and replace it with `tag=vX.Y.Z` (build status and coverage in README.md)
        3) search for `tree/master` and replace it with `tree/vX.Y.Z` (README.md)
    b) change `version` in settings.gradle to X.Y.Z (remove -SNAPSHOT)
    c) commit (modified build.gradle, README.md and differences.md)
    d) git tag vX.Y.Z
    e) git push origin vX.Y.Z
2. publish plugins
   a) gr publishPlugins
3. create release on github


Prepare next dev cycle
-----------------------
1. change version in settings.gradle to X.Y.Z-SNAPSHOT
2. point to master
   a) search for `tag=vX.Y.Z` and replace it with `branch=master`
   b) search for `tree/vX.Y.Z` and replace it with `tree/master`
3. commit & push changes

*/
